/**
 * Generated by Agitar build: JUnitFactory Version 2.1.2.000677 (Build date: Dec 21, 2007) [2.1.2.000677]
 * JDK Version: 1.5.0_11
 *
 * Generated on Jan 5, 2008 7:26:27 AM
 * Time to generate: 00:17.550 seconds
 *
 *
 *
 */

package org.gavaghan.geodesy;

import org.junit.Assert;
import org.junit.Test;

public class GlobalPositionAgitarTest {
    

    @Test
    public void testConstructor() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(new GlobalCoordinates(-90.0, 100.0), 100.0);
        Assert.assertEquals("globalPosition.getLongitude()", 100.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", -90.0, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testConstructor1() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(new GlobalCoordinates(100.0, 0.0010), 100.0);
        Assert.assertEquals("globalPosition.getLongitude()", -179.99900000000002, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", 80.0, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testConstructor2() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(180.0, 0.0, 100.0);
        Assert.assertEquals("globalPosition.getLongitude()", 180.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", 0.0, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testConstructor3() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(89.9991, 180.0, 100.0);
        Assert.assertEquals("globalPosition.getLongitude()", 180.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", 89.9991, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testConstructor4() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(new GlobalPosition(90.0, 100.0, 1000.0), 100.0);
        Assert.assertEquals("globalPosition.getLongitude()", 100.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", 90.0, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testConstructor5() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(new GlobalCoordinates(100.0, 0.0), 100.0);
        Assert.assertEquals("globalPosition.getLongitude()", 180.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", 80.0, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testConstructor6() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(new GlobalCoordinates(-1169.9991, -1260.0), 100.0);
        Assert.assertEquals("globalPosition.getLongitude()", 180.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", -89.9991, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testConstructor7() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(new GlobalCoordinates(-990.0009, 100.0), 100.0);
        Assert.assertEquals("globalPosition.getLongitude()", 100.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", 89.9991, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testConstructor8() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(90.0, 180.0, 100.0);
        Assert.assertEquals("globalPosition.getLongitude()", 180.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", 90.0, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testConstructor9() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(-90.0009, 100.0, 1000.0);
        Assert.assertEquals("globalPosition.getLongitude()", -80.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 1000.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", -89.9991, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testConstructor10() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(-1169.9991, 180.0, 100.0);
        Assert.assertEquals("globalPosition.getLongitude()", 180.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", -89.9991, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testConstructor11() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(-90.0, 180.0, 100.0);
        Assert.assertEquals("globalPosition.getLongitude()", 180.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
        Assert.assertEquals("globalPosition.getLatitude()", -90.0, globalPosition.getLatitude(), 1.0E-6);
    }

    @Test
    public void testCompareTo() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(new GlobalCoordinates(1000.0, 0.0), 100.0);
        int result = globalPosition.compareTo(new GlobalPosition(0.0, 0.0, 100.0));
        Assert.assertEquals("result", -1, result);
    }

    @Test
    public void testCompareTo1() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(100.0, 1000.0, 0.0);
        int result = globalPosition.compareTo(new GlobalPosition(new GlobalCoordinates(100.0, 1.0), 100.0));
        Assert.assertEquals("result", 1, result);
    }

    @Test
    public void testCompareTo2() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(-100.0, 0.0, 100.0);
        int result = globalPosition.compareTo(new GlobalPosition(-80.0, 180.0, 0.0));
        Assert.assertEquals("result", 1, result);
    }

    @Test
    public void testCompareTo3() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(100.0, 1000.0, 0.0);
        int result = globalPosition.compareTo(globalPosition);
        Assert.assertEquals("result", 0, result);
    }

    @Test
    public void testCompareTo4() throws Throwable {
        int result = new GlobalPosition(-89.98740000900011, -0.021600000000034925, 0.0).compareTo(new GlobalPosition(new GlobalCoordinates(-1169.987400009, -2160.0216), 100.0));
        Assert.assertEquals("result", -1, result);
    }

    @Test
    public void testEquals() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(new GlobalCoordinates(100.0, 1000.0), 100.0);
        boolean result = globalPosition.equals(globalPosition);
        Assert.assertTrue("result", result);
    }

    @Test
    public void testEquals1() throws Throwable {
        boolean result = new GlobalPosition(100.0, 1000.0, 0.0).equals(new Integer(-1));
        Assert.assertFalse("result", result);
    }

    @Test
    public void testEquals2() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(new GlobalCoordinates(100.0, 1000.0), 0.0);
        boolean result = globalPosition.equals(new GlobalPosition(new GlobalCoordinates(1000.0, 0.0), 0.0));
        Assert.assertFalse("result", result);
    }

    @Test
    public void testEquals3() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(new GlobalCoordinates(100.0, 1000.0), 100.0);
        boolean result = globalPosition.equals(new GlobalPosition(100.0, 1000.0, 0.0));
        Assert.assertFalse("result", result);
    }

    @Test
    public void testHashCode() throws Throwable {
        int result = new GlobalPosition(new GlobalCoordinates(100.0, 1000.0), 0.0).hashCode();
        Assert.assertEquals("result", 2146483615, result);
    }

    @Test
    public void testHashCode1() throws Throwable {
        int result = new GlobalPosition(100.0, 1000.0, -1.0).hashCode();
        Assert.assertEquals("result", -2146483615, result);
    }

    @Test
    public void testHashCode2() throws Throwable {
        int result = new GlobalPosition(new GlobalCoordinates(100.0, 1000.0), 2.0E-5).hashCode();
        Assert.assertEquals("result", 0, result);
    }

    @Test
    public void testSetElevation() throws Throwable {
        GlobalPosition globalPosition = new GlobalPosition(100.0, 1000.0, 0.0);
        globalPosition.setElevation(100.0);
        Assert.assertEquals("globalPosition.getElevation()", 100.0, globalPosition.getElevation(), 1.0E-6);
    }

    @Test
    public void testToString() throws Throwable {
        String result = new GlobalPosition(new GlobalCoordinates(359.999, 100.0), 100.0).toString();
        Assert.assertEquals("result", "9.999999999763531E-4S;100.0E;elevation=100.0m", result);
    }

    @Test
    public void testToString1() throws Throwable {
        String result = new GlobalPosition(new GlobalCoordinates(1000.0, 359.999), 100.0).toString();
        Assert.assertEquals("result", "80.0S;9.999999999763531E-4W;elevation=100.0m", result);
    }

    @Test
    public void testToString2() throws Throwable {
        String result = new GlobalPosition(new GlobalCoordinates(0.0, 100.0), 100.0).toString();
        Assert.assertEquals("result", "0.0N;100.0E;elevation=100.0m", result);
    }

    @Test
    public void testToString3() throws Throwable {
        String result = new GlobalPosition(new GlobalCoordinates(0.0, 360.0), 100.0).toString();
        Assert.assertEquals("result", "0.0N;0.0E;elevation=100.0m", result);
    }

    @Test
    public void testToString4() throws Throwable {
        String result = new GlobalPosition(new GlobalCoordinates(360.001, 100.0), 100.0).toString();
        Assert.assertEquals("result", "9.999999999763531E-4N;100.0E;elevation=100.0m", result);
    }

    @Test
    public void testToString5() throws Throwable {
        String result = new GlobalPosition(new GlobalCoordinates(1000.0, 0.0010), 100.0).toString();
        Assert.assertEquals("result", "80.0S;0.0010000000000047748E;elevation=100.0m", result);
    }

    @Test
    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new GlobalPosition(null, 100.0);
            Assert.fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            Assert.assertNull("ex.getMessage()", ex.getMessage());
        }
    }

    @Test
    public void testCompareToThrowsNullPointerException() throws Throwable {
        try {
            new GlobalPosition(100.0, 1000.0, 0.0).compareTo((GlobalPosition) null);
            Assert.fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            Assert.assertNull("ex.getMessage()", ex.getMessage());
        }
    }
}

