/**
 * Generated by Agitar build: JUnitFactory Version 2.1.2.000677 (Build date: Dec 21, 2007) [2.1.2.000677]
 * JDK Version: 1.5.0_11
 *
 * Generated on Jan 5, 2008 7:27:34 AM
 * Time to generate: 00:25.031 seconds
 *
 *
 *
 */

package org.gavaghan.geodesy;

import org.junit.Assert;
import org.junit.Test;

public class GlobalCoordinatesAgitarTest {
    
    @Test
	public void testConstructor() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-90.000000009, 0.0);
        Assert.assertEquals("globalCoordinates.getLongitude()", 180.0, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", -89.999999991, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor1() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(90.0, -180.001);
        Assert.assertEquals("globalCoordinates.getLongitude()", 179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 90.0, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor2() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(90.0, -179.999);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.999, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 90.0, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor3() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-450.0009, 360.001);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", -89.9991, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor4() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-1169.9991, -179.999);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.999, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", -89.9991, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor5() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-450.0009, 0.0);
        Assert.assertEquals("globalCoordinates.getLongitude()", 180.0, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", -89.9991, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor6() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(180.001, 360.001);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", -9.999999999763531E-4, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor7() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(180.0, 0.0);
        Assert.assertEquals("globalCoordinates.getLongitude()", 180.0, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 0.0, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor8() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(90.0009, 360.001);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 89.9991, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor9() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-90.0009, 100.0);
        Assert.assertEquals("globalCoordinates.getLongitude()", -80.0, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", -89.9991, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor10() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-1169.9991, -180.001);
        Assert.assertEquals("globalCoordinates.getLongitude()", 179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", -89.9991, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor11() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 0.0);
        Assert.assertEquals("globalCoordinates.getLongitude()", 180.0, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 80.0, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor12() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-90.000000009, 360.001);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", -89.999999991, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor13() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-180.001, -360.0036);
        Assert.assertEquals("globalCoordinates.getLongitude()", 179.9964, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 9.999999999763531E-4, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor14() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-181.0, 360.001);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 1.0, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor15() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-269.9991, 360.001);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 89.9991, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testConstructor16() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(89.999, -180.001);
        Assert.assertEquals("globalCoordinates.getLongitude()", 179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 89.99900000000002, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
//    @Test
//	public void testCanonicalize() throws Throwable {
//        GlobalCoordinates globalCoordinates = new GlobalCoordinates(90.0009, 100.0);
//        callPrivateMethod("org.gavaghan.geodesy.GlobalCoordinates", "canonicalize", new Class[] {}, globalCoordinates, new Object[] {});
//        Assert.assertEquals("globalCoordinates.getLongitude()", -80.0, globalCoordinates.getLongitude(), 1.0E-6);
//        Assert.assertEquals("globalCoordinates.getLatitude()", 89.9991, globalCoordinates.getLatitude(), 1.0E-6);
//    }
//
//    @Test
//	public void testCanonicalize1() throws Throwable {
//        GlobalCoordinates globalCoordinates = new GlobalCoordinates(90.0, 100.0);
//        callPrivateMethod("org.gavaghan.geodesy.GlobalCoordinates", "canonicalize", new Class[] {}, globalCoordinates, new Object[] {});
//        Assert.assertEquals("globalCoordinates.getLongitude()", 100.0, globalCoordinates.getLongitude(), 1.0E-6);
//        Assert.assertEquals("globalCoordinates.getLatitude()", 90.0, globalCoordinates.getLatitude(), 1.0E-6);
//    }
//
//    @Test
//	public void testCanonicalize2() throws Throwable {
//        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 360.001);
//        callPrivateMethod("org.gavaghan.geodesy.GlobalCoordinates", "canonicalize", new Class[] {}, globalCoordinates, new Object[] {});
//        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
//        Assert.assertEquals("globalCoordinates.getLatitude()", 80.0, globalCoordinates.getLatitude(), 1.0E-6);
//    }
//
//    @Test
//	public void testCanonicalize3() throws Throwable {
//        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-450.0009, 100.0);
//        callPrivateMethod("org.gavaghan.geodesy.GlobalCoordinates", "canonicalize", new Class[] {}, globalCoordinates, new Object[] {});
//        Assert.assertEquals("globalCoordinates.getLongitude()", -80.0, globalCoordinates.getLongitude(), 1.0E-6);
//        Assert.assertEquals("globalCoordinates.getLatitude()", -89.9991, globalCoordinates.getLatitude(), 1.0E-6);
//    }
//
//    @Test
//	public void testCanonicalize4() throws Throwable {
//        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 0.0);
//        callPrivateMethod("org.gavaghan.geodesy.GlobalCoordinates", "canonicalize", new Class[] {}, globalCoordinates, new Object[] {});
//        Assert.assertEquals("globalCoordinates.getLongitude()", 180.0, globalCoordinates.getLongitude(), 1.0E-6);
//        Assert.assertEquals("globalCoordinates.getLatitude()", 80.0, globalCoordinates.getLatitude(), 1.0E-6);
//    }
//
//    @Test
//	public void testCanonicalize5() throws Throwable {
//        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-90.0, 100.0);
//        callPrivateMethod("org.gavaghan.geodesy.GlobalCoordinates", "canonicalize", new Class[] {}, globalCoordinates, new Object[] {});
//        Assert.assertEquals("globalCoordinates.getLongitude()", 100.0, globalCoordinates.getLongitude(), 1.0E-6);
//        Assert.assertEquals("globalCoordinates.getLatitude()", -90.0, globalCoordinates.getLatitude(), 1.0E-6);
//    }
    
    @Test
	public void testCompareTo() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(1000.0, 0.0);
        int result = globalCoordinates.compareTo(new GlobalCoordinates(0.0, 0.0));
        Assert.assertEquals("result", -1, result);
    }
    
    @Test
	public void testCompareTo1() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-54.12682626557432, -43.319025743636864);
        int result = new GlobalCoordinates(-54.12682626557432, -43.31902574363687).compareTo(globalCoordinates);
        Assert.assertEquals("result", 0, result);
    }
    
    @Test
	public void testCompareTo2() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(0.0, -69.0);
        int result = globalCoordinates.compareTo(new GlobalCoordinates(-1.0, -69.0));
        Assert.assertEquals("result", 1, result);
    }
    
    @Test
	public void testCompareTo3() throws Throwable {
        int result = new GlobalCoordinates(0.0, -28.367958936972176).compareTo(new GlobalCoordinates(1000.0, -28.36739158630371));
        Assert.assertEquals("result", -1, result);
    }
    
    @Test
	public void testCompareTo4() throws Throwable {
        GlobalCoordinates other = new GlobalCoordinates(100.0, 1000.0);
        other.setLongitude(359.999);
        int result = new GlobalCoordinates(1000.0, 0.0).compareTo(other);
        Assert.assertEquals("result", 1, result);
    }
    
    @Test
	public void testCompareTo5() throws Throwable {
        GlobalCoordinates other = new GlobalCoordinates(100.0, 1000.0);
        other.setLongitude(359.999);
        other.setLatitude(89.999);
        int result = new GlobalCoordinates(-270.0, -9.999999999763531E-4).compareTo(other);
        Assert.assertEquals("result", 1, result);
    }
    
    @Test
	public void testEquals() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(1000.0, 0.0);
        boolean result = globalCoordinates.equals(new GlobalCoordinates(0.0, 360.001));
        Assert.assertFalse("result", result);
    }
    
    @Test
	public void testEquals1() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(1000.0, 0.0);
        boolean result = globalCoordinates.equals(new GlobalCoordinates(0.0, 0.0));
        Assert.assertFalse("result", result);
    }
    
    @Test
	public void testEquals2() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        boolean result = globalCoordinates.equals(globalCoordinates);
        Assert.assertTrue("result", result);
    }
    
    @Test
	public void testEquals3() throws Throwable {
        boolean result = new GlobalCoordinates(100.0, 1000.0).equals("testString");
        Assert.assertFalse("result", result);
    }
    
    @Test
	public void testHashCode() throws Throwable {
        int result = new GlobalCoordinates(100.0, 1000.0).hashCode();
        Assert.assertEquals("result", 2146483615, result);
    }
    
    @Test
	public void testSetLatitude() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLongitude(-180.0);
        globalCoordinates.setLatitude(1000.0);
        Assert.assertEquals("globalCoordinates.getLatitude()", -80.0, globalCoordinates.getLatitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLongitude()", 180.0, globalCoordinates.getLongitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude1() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLongitude(360.001);
        globalCoordinates.setLatitude(100.0);
        globalCoordinates.setLatitude(-90.0);
        Assert.assertEquals("globalCoordinates.getLatitude()", -90.0, globalCoordinates.getLatitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude2() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLongitude(360.001);
        globalCoordinates.setLatitude(100.0);
        globalCoordinates.setLatitude(-360.0);
        Assert.assertEquals("globalCoordinates.getLatitude()", 0.0, globalCoordinates.getLatitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude3() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(1000.0, 180.0);
        globalCoordinates.setLatitude(-360.0);
        Assert.assertEquals("globalCoordinates.getLatitude()", 0.0, globalCoordinates.getLatitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLongitude()", 180.0, globalCoordinates.getLongitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude4() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLatitude(-89.999);
        Assert.assertEquals("globalCoordinates.getLatitude()", -89.999, globalCoordinates.getLatitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLongitude()", 100.0, globalCoordinates.getLongitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude5() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLatitude(-181.0);
        Assert.assertEquals("globalCoordinates.getLatitude()", 1.0, globalCoordinates.getLatitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLongitude()", -80.0, globalCoordinates.getLongitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude6() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLongitude(360.001);
        globalCoordinates.setLatitude(100.0);
        globalCoordinates.setLatitude(89.999);
        Assert.assertEquals("globalCoordinates.getLatitude()", 89.99900000000002, globalCoordinates.getLatitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude7() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLongitude(0.0);
        globalCoordinates.setLatitude(100.0);
        Assert.assertEquals("globalCoordinates.getLongitude()", 180.0, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 80.0, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude8() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLongitude(360.001);
        globalCoordinates.setLatitude(100.0);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 80.0, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude9() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLatitude(90.0);
        Assert.assertEquals("globalCoordinates.getLatitude()", 90.0, globalCoordinates.getLatitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLongitude()", 100.0, globalCoordinates.getLongitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude10() throws Throwable {
        GlobalCoordinates globalPosition = new GlobalPosition(new GlobalCoordinates(100.0, 1000.0), 100.0);
        globalPosition.setLatitude(-90.0009);
        Assert.assertEquals("(GlobalPosition) globalPosition.getLongitude()", -80.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("(GlobalPosition) globalPosition.getLatitude()", -89.9991, globalPosition.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude11() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLatitude(90.001);
        Assert.assertEquals("globalCoordinates.getLatitude()", 89.99900000000002, globalCoordinates.getLatitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLongitude()", -80.0, globalCoordinates.getLongitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude12() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLongitude(0.0);
        globalCoordinates.setLatitude(180.0);
        Assert.assertEquals("globalCoordinates.getLatitude()", 0.0, globalCoordinates.getLatitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLongitude()", 180.0, globalCoordinates.getLongitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLatitude13() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLongitude(0.0);
        globalCoordinates.setLatitude(-181.0);
        Assert.assertEquals("globalCoordinates.getLatitude()", 1.0, globalCoordinates.getLatitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLongitude()", 180.0, globalCoordinates.getLongitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLongitude() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-90.0, 100.0);
        globalCoordinates.setLongitude(-2519.9748);
        Assert.assertEquals("globalCoordinates.getLongitude()", 0.025200000000040745, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", -90.0, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLongitude1() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-270.0, 100.0);
        globalCoordinates.setLongitude(-2519.9748);
        Assert.assertEquals("globalCoordinates.getLongitude()", 0.025200000000040745, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 90.0, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLongitude2() throws Throwable {
        GlobalCoordinates globalPosition = new GlobalPosition(new GlobalCoordinates(100.0, 1000.0), 100.0);
        globalPosition.setLatitude(89.999);
        globalPosition.setLongitude(100.0);
        Assert.assertEquals("(GlobalPosition) globalPosition.getLongitude()", 100.0, globalPosition.getLongitude(), 1.0E-6);
        Assert.assertEquals("(GlobalPosition) globalPosition.getLatitude()", 89.99900000000002, globalPosition.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLongitude3() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLatitude(-90.0);
        globalCoordinates.setLongitude(-180.0);
        Assert.assertEquals("globalCoordinates.getLongitude()", 180.0, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", -90.0, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLongitude4() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(100.0, 1000.0);
        globalCoordinates.setLatitude(89.999);
        globalCoordinates.setLongitude(180.001);
        Assert.assertEquals("globalCoordinates.getLongitude()", -179.99900000000002, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", 89.99900000000002, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testSetLongitude5() throws Throwable {
        GlobalCoordinates globalCoordinates = new GlobalCoordinates(-450.0009, 100.0);
        globalCoordinates.setLongitude(100.0);
        Assert.assertEquals("globalCoordinates.getLongitude()", 100.0, globalCoordinates.getLongitude(), 1.0E-6);
        Assert.assertEquals("globalCoordinates.getLatitude()", -89.9991, globalCoordinates.getLatitude(), 1.0E-6);
    }
    
    @Test
	public void testToString() throws Throwable {
        String result = new GlobalCoordinates(0.0, 100.0).toString();
        Assert.assertEquals("result", "0.0N;100.0E;", result);
    }
    
    @Test
	public void testToString1() throws Throwable {
        String result = new GlobalCoordinates(-0.0010, 100.0).toString();
        Assert.assertEquals("result", "0.0010000000000047748S;100.0E;", result);
    }
    
    @Test
	public void testToString2() throws Throwable {
        String result = new GlobalCoordinates(100.0, -179.999).toString();
        Assert.assertEquals("result", "80.0N;0.0010000000000047748E;", result);
    }
    
    @Test
	public void testToString3() throws Throwable {
        String result = new GlobalCoordinates(1000.0, 0.0).toString();
        Assert.assertEquals("result", "80.0S;0.0E;", result);
    }
    
    @Test
	public void testToString4() throws Throwable {
        String result = new GlobalCoordinates(-180.001, -179.999).toString();
        Assert.assertEquals("result", "9.999999999763531E-4N;0.0010000000000047748E;", result);
    }
    
    @Test
	public void testToString5() throws Throwable {
        String result = new GlobalCoordinates(1.0, -9.999999999763531E-4).toString();
        Assert.assertEquals("result", "1.0N;9.999999999763531E-4W;", result);
    }
    
    @Test
	public void testToString6() throws Throwable {
        String result = new GlobalCoordinates(1000.0, -9.999999999763531E-4).toString();
        Assert.assertEquals("result", "80.0S;9.999999999763531E-4W;", result);
    }
    
    @Test
	public void testCompareToThrowsNullPointerException() throws Throwable {
        try {
            new GlobalCoordinates(100.0, 1000.0).compareTo((GlobalCoordinates) null);
            Assert.fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            Assert.assertNull("ex.getMessage()", ex.getMessage());
//            assertThrownBy(GlobalCoordinates.class, ex);
        }
    }
}

